{"name":"DMRESTRequest","body":"# DMRESTRequest\r\n## Overview\r\n**DMRESTRequest** is a super simple wrapper around **NSURLConnection** and **NSMutableRequest**. \r\nIt's allow you to launch REST Requests to your server in 2 line, literally. \r\n\r\nIt's built using **ARC** and targeted for iOS 5. \r\n\r\nI wrote it as an highly re-usable class, you are invited to customize it to make it fit in your client/server implementation.\r\n\r\nThis is not a framework or a complete solution like RESTKit is. \r\n**DMRESTRequest** is a utility I wrote mostly because all other frameworks was too much complicated for my need. It is aim to do simple REST Request to a server without object mapping, network management, queuing etc...\r\n\r\nAlso, DMRESTRequest is especially targeted for server that send back response as JSON but can be used of other response format too. \r\n\r\n## Features\r\n1. Support 2 way of executing a request, using block or delegate. \r\n2. Super simple to instantiate, you have to pass the **HTTP** method you want to use, the targeted **ressource** and the **parameters** as a dictionary `key=value`\r\n3. The class take care of building the appropriate request and the parameters data. \r\n4. Response trough a delegate (also works for blocks) method when no active internet connection is available. No Reachbility needed. \r\n5. Work with the status bar activity indicator. \r\n6. I've wrote a little category to encode the parameters string in UTF-8 and escape it. It is included as **DMRESTRequest** use it. \r\n7. Automatic parameters converstion to JSON format for HTTPBody if needed. \r\n8. Basic HTTP auth support. \r\n\r\n## What you should know before using it\r\n\r\n###Constants\r\nYou have to edit 2 constants, in **DMRESTRequest**, your `API_URL` and `FILE_EXT`. Those constants represent your server endpoint and the file extensions you use (ie .json).\r\nURL string is constructed like this `API_URL/ressource.FILE_EXT?parameters`\r\n\r\n###Timeout\r\nDefault `Timeout` interval is 60 seconds, support custom HTTP header fields. Both are properties that you can set:  `request.timeout = 30`.\r\n\r\n###Sending parameters as JSON\r\nFor automatic parameters conversion to JSON format for HTTPBody just set `request.sendJSON = YES` before executing the request.\r\nIt will automagically convert your parameters to a JSON string and set thr HTTP stuff like `application/json`. (Useful for RAILS REST service for example)\r\n\r\n###HTTP header fields\r\nThe standard HTTP content-type is hardcoded to `application/x-www-form-urlencoded`, you're free to make it dynamic if you need a custom one. But for most/all of your requests it should works. \r\n\r\n\r\n###Custom HTTP header fields\r\nWith the property `HTTPHeaderFields` you can overwrite the default HTTP header fields by yours. Once this property is modified DMRestRequest will not add any extra parameters itself. So you have to take care of everythings. \r\n\r\n## Getting started\r\nThis is a really simple set of classes, ready to use, just import **DMRESTRequest**, and **NSString+TotalEscaping** in your project, import **DMRESTRequest.h**  where you wan to make requests and you're done. \r\n\r\n## Code example\r\nYou will find more detailled examples in the project... \r\n\r\n### using block method\r\n\r\n\t restRequest = [[DMRESTRequest alloc]initWithMethod:@\"GET\" \r\n                                             ressource:@\"users\"\r\n                                            parameters:\r\n\t\t\t\t[NSDictionary dictionaryWithObject:@\"Dimillian\" forKey:@\"user\"] \r\n                                        shouldEscapeParameters:YES];\r\n\r\n    [restRequest executeBlockRequest:^(NSURLResponse *response, NSData *data, NSError *error){\r\n        if (error) {\r\n \t\t\t//error\r\n        }\r\n        else {\r\n            //Success\r\n        }\r\n    }];`\r\n   \r\n   \r\n### using delegate \r\n\r\n\t-(void)requestDidStart\r\n\t{\r\n\t   \r\n\t}\r\n\t\r\n\t-(void)requestDidRespondWithHTTPStatus:(NSInteger)status\r\n\t{\r\n\t \r\n\t}\r\n\t\r\n\t-(void)requestDidFinishWithJSON:(NSJSONSerialization *)json\r\n\t{\r\n\t    \r\n\t}\r\n\t\r\n\t-(void)requestDidFailWithError:(NSError *)error\r\n\t{\r\n\t   \r\n\t}\r\n\t\r\n\t-(void)requestDidFailBecauseNoActiveConnection\r\n\t{\r\n\t    \r\n\t}\r\n\t\r\n\t-(void)requestCredentialIncorrectForHTTPAuth\r\n\t{\r\n\t    \r\n\t}\r\n\r\n\t\r\n## How to enhance it ? \r\nHere is a few points you should take into considerations to make this class better.\r\n\r\n1. You can enhance the custom model for error handling to make it match your server error response.\r\n3. Add some authentication support. \r\n4. Make it more HTTP compliant. Support custom content type. \r\n5. Create your own JSON parsers and create your own model to match your server implementation and make them works with this class. \r\n\r\n## Licensing \r\nCopyright (C) 2012 by Thomas Ricouard. \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","tagline":"Super simple Objective-C REST request wrapper. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}